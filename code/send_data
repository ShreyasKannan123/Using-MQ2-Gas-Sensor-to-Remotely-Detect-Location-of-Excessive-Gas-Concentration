""" IMPORTS """ 
import network 
import socket 
import time 
from machine import Pin, ADC, I2C, UART 
from secret import ssid, password 
import random 
from mq2 import MQ2 
from ssd1306 import SSD1306_I2C 
import utime 

# Defining the I2C 
i2c = I2C(0, sda=Pin(0), scl=Pin(1), freq=400000) 

# Defining the GPS Sensor 
gpsModule = UART(1, baudrate=9600, tx=Pin(4), rx=Pin(5)) 

# Defining the Gas Sensor 
pin = 26 
sensor = MQ2(pinData=pin, baseVoltage=3.3) 

""" GLOBAL VARIABLES """ 
buff = bytearray(255) 
TIMEOUT = False 
FIX_STATUS = False 
latitude = "" 
longitude = "" 
satellites = "" 
GPStime = "" 

""" NETWORK SETUP """ 
wlan = network.WLAN(network.STA_IF) 
wlan.active(True) 
wlan.connect(ssid, password) 

# Wait for connect or fail 
max_wait = 10 
while max_wait > 0: 
    if wlan.status() < 0 or wlan.status() >= 3: 
        break 
    max_wait -= 1 
    print("waiting for connection...") 
    time.sleep(1) 

# Handle connection error     
if wlan.status() != 3: 
    raise RuntimeError("network connection failed") 

else: 
    print("connected") 
    status = wlan.ifconfig() 
    print("ip = " + status[0]) 
    
# Open socket 
addr = socket.getaddrinfo("0.0.0.0", 80)[0][-1] 
s = socket.socket() 
s.bind(addr) 
s.listen(1)
print("listening on", addr) 

""" UTILITY FUNCTIONS """ 
def getGPS(gpsModule): 
    global FIX_STATUS, TIMEOUT, latitude, longitude, satellites, GPStime 
    timeout = time.time() + 5 
    while True: 
        gpsModule.readline() 
        buff = str(gpsModule.readline()) 
        parts = buff.split(',') 
        
        if (parts[0] == "b'$GNGGA" and len(parts) == 15): 
            if (parts[1] and parts[2] and parts[3] and parts[4] and parts[5] and parts[6] and parts[7]): 
                print(buff) 
                
                latitude = convertToDegree(parts[2]) 
                if (parts[3] == 'S'): 
                    latitude = -latitude 
                longitude = convertToDegree(parts[4]) 
                
                if (parts[5] == 'W'): 
                    longitude = -longitude 
                satellites = parts[7] 
                
                GPStime = parts[1][0:2] + ":" + parts[1][2:4] + ":" + parts[1][4:6] 
                
                FIX_STATUS = True 
                break 
            
        if (time.time() > timeout): 
            TIMEOUT = True 
            break 
        utime.sleep_ms(500) 
        
def convertToDegree(RawDegrees): 
    RawAsFloat = float(RawDegrees) 
    firstdigits = int(RawAsFloat/100) 
    nexttwodigits = RawAsFloat - float(firstdigits*100) 
    Converted = float(firstdigits + nexttwodigits/60.0) 
    Converted = '{0:.6f}'.format(Converted) 
    return str(Converted) 

# Listen for connections 
while True: 
    try: 
        cl, addr = s.accept() 
        print("client connected from ", addr) 
        request = cl.recv(1024) 
        print(request) 
        
        getGPS(gpsModule) 
        if (FIX_STATUS == True): 
            la = "Latitude: " + str(latitude)
            lo = "Longitude: " + str(longitude) 
            FIX_STATUS = False 
            
        if (TIMEOUT == True): 
            la = "---" 
            lo = "---" 
            TIMEOUT = False 
        
        k = sensor.readSmoke() 
        utime.sleep(0.5) 
        
        # This is what we send in reply 
        response = str(k) + "," + la + "," + lo 
        cl.send(response) 
        print("Data sent!") 
        cl.close() 
        
    except OSError as e: 
        cl.close() 
        print("connection closed")
